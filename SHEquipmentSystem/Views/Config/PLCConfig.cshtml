@{
    ViewData["Title"] = "PLC配置";
}

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SH设备配置管理系统</title>

    <!-- Element Plus CSS -->
    @* <link rel="stylesheet" href="https://unpkg.com/element-plus@@2.4.4/dist/index.css"> *@
    <link rel="stylesheet" href="~/lib/element-plus/index.css">
    <!-- JavaScript 依赖 -->
    <script src="~/lib/vue/vue.global.js"></script>
    <script src="~/lib/element-plus/index.full.js"></script>
    <script src="~/lib/element-plus-icons-vue/index.iife.min.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .loading-container {
            text-align: center;
            padding: 50px;
        }
    </style>
</head>
<body>
    <div id="app" class="container">
        <div v-if="!appReady" class="loading-container">
            <p>正在加载页面...</p>
        </div>

        <div v-else>
            <!-- 页面头部 -->
            <el-card style="margin-bottom: 20px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div style="display: flex; align-items: center; gap: 12px;">
                        <el-button link onclick="window.history.back()">
                            <el-icon><ArrowLeft /></el-icon>
                            返回
                        </el-button>
                        <h2 style="margin: 0; color: #303133;">PLC通信配置</h2>
                    </div>
                    <div style="display: flex; gap: 10px;">
                        <el-button type="primary" @@click="savePLCConfig" :loading="saving">
                            保存配置
                        </el-button>
                        <el-button @@click="testConnection" :loading="testing">
                            测试连接
                        </el-button>
                    </div>
                </div>
            </el-card>

            <!-- 连接状态 -->
            <el-card style="margin-bottom: 20px;">
                <template #header>
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <span style="font-weight: 600;">连接状态</span>
                        <el-tag :type="connectionStatus.isConnected ? 'success' : 'info'">
                            {{ connectionStatus.isConnected ? '已连接' : '未连接' }}
                        </el-tag>
                    </div>
                </template>

                <el-row :gutter="20" v-if="connectionStatus.isConnected">
                    <el-col :span="6">
                        <el-statistic title="连接时间" :value="formatConnectionTime(connectionStatus.lastConnectedTime)" />
                    </el-col>
                    <el-col :span="6">
                        <el-statistic title="发送消息" :value="connectionStatus.sentCount || 0" />
                    </el-col>
                    <el-col :span="6">
                        <el-statistic title="接收消息" :value="connectionStatus.receiveCount || 0" />
                    </el-col>
                    <el-col :span="6">
                        <el-statistic title="错误次数" :value="connectionStatus.errorCount || 0" />
                    </el-col>
                </el-row>

                <div v-else style="text-align: center; padding: 20px; color: #909399;">
                    <el-icon size="32"><WarningFilled /></el-icon>
                    <p style="margin: 10px 0 0 0;">PLC连接未建立</p>
                </div>
            </el-card>

            <!-- 配置表单 -->
            <el-row :gutter="20">
                <!-- 基础配置 -->
                <el-col :span="12">
                    <el-card shadow="hover">
                        <template #header>
                            <span style="font-weight: 600;">基础连接配置</span>
                        </template>

                        <el-form :model="plcConfig" :rules="rules" ref="configForm" label-width="80px" v-loading="loading">
                            <el-form-item label="IP地址" prop="ipAddress">
                                <el-input v-model="plcConfig.ipAddress"
                                          placeholder="192.168.1.10"
                                          :disabled="connectionStatus.isConnected">
                                </el-input>
                            </el-form-item>

                            <el-form-item label="端口" prop="port">
                                <el-input-number v-model="plcConfig.port"
                                                 :min="1"
                                                 :max="65535"
                                                 style="width: 100%;"
                                                 :disabled="connectionStatus.isConnected">
                                </el-input-number>
                            </el-form-item>

                            <el-form-item label="网络号">
                                <el-input-number v-model="plcConfig.networkNumber"
                                                 :min="0"
                                                 :max="255"
                                                 style="width: 100%;">
                                </el-input-number>
                            </el-form-item>

                            <el-form-item label="站号">
                                <el-input-number v-model="plcConfig.stationNumber"
                                                 :min="0"
                                                 :max="31"
                                                 style="width: 100%;">
                                </el-input-number>
                            </el-form-item>
                        </el-form>
                    </el-card>
                </el-col>

                <!-- 超时参数 -->
                <el-col :span="12">
                    <el-card shadow="hover">
                        <template #header>
                            <span style="font-weight: 600;">超时参数配置</span>
                        </template>

                        <el-form :model="plcConfig" label-width="80px">
                            <el-form-item label="连接超时">
                                <el-input-number v-model="plcConfig.connectTimeout"
                                                 :min="1000"
                                                 :max="30000"
                                                 :step="1000"
                                                 style="width: 100%;">
                                </el-input-number>
                                <span style="font-size: 12px; color: #909399; ">单位：毫秒</span>
                                @* <span style="font-size: 12px; color: #909399;">毫秒</span> *@
                            </el-form-item>

                            <el-form-item label="接收超时">
                                <el-input-number v-model="plcConfig.receiveTimeout"
                                                 :min="1000"
                                                 :max="20000"
                                                 :step="1000"
                                                 style="width: 100%;">
                                </el-input-number>
                                <div style="font-size: 12px; color: #909399; margin-top: 5px;">单位：毫秒</div>
                            </el-form-item>

                            <el-form-item label="轮询间隔">
                                <el-input-number v-model="plcConfig.pollInterval"
                                                 :min="100"
                                                 :max="10000"
                                                 :step="100"
                                                 style="width: 100%;">
                                </el-input-number>
                                <div style="font-size: 12px; color: #909399; margin-top: 5px;">单位：毫秒</div>
                            </el-form-item>

                            <el-form-item label="自动重连">
                                <el-switch v-model="plcConfig.enableAutoReconnect"
                                           active-text="启用"
                                           inactive-text="禁用">
                                </el-switch>
                            </el-form-item>
                        </el-form>
                    </el-card>
                </el-col>
            </el-row>

            <!-- 高级设置 -->
            <el-card style="margin-top: 20px;" shadow="hover">
                <template #header>
                    <span style="font-weight: 600;">高级设置</span>
                </template>

                <el-row :gutter="20">
                    <el-col :span="8">
                        <el-form-item label="最大重试次数" label-width="120px">
                            <el-input-number v-model="plcConfig.maxRetryCount"
                                             :min="1"
                                             :max="10"
                                             style="width: 100%;">
                            </el-input-number>
                        </el-form-item>
                    </el-col>
                    <el-col :span="8">
                        <el-form-item label="重连间隔" label-width="120px">
                            <div style="display: flex; align-items: center; gap: 8px;">
                                <el-input-number v-model="plcConfig.reconnectInterval"
                                                 :min="1000"
                                                 :max="60000"
                                                 :step="1000"
                                                 style="flex: 1;">
                                </el-input-number>
                                <span style="font-size: 12px; color: #909399;">毫秒</span>
                            </div>
                        </el-form-item>
                    </el-col>
                    <el-col :span="8">
                        <div style="padding: 10px 0;">
                            <el-button @@click="resetConfig" type="warning" plain>
                                重置配置
                            </el-button>
                        </div>
                    </el-col>
                </el-row>
            </el-card>

            <!-- 测试结果对话框 -->
            <el-dialog v-model="showTestDialog" title="连接测试结果" width="400px" center>
                <div style="text-align: center;">
                    <el-icon :size="48" :color="testResult.success ? '#67c23a' : '#f56c6c'">
                        <SuccessFilled v-if="testResult.success" />
                        <CircleCloseFilled v-else />
                    </el-icon>
                    <h3 style="margin: 15px 0; color: #303133;">
                        {{ testResult.success ? '连接成功' : '连接失败' }}
                    </h3>
                    <p style="color: #666; margin-bottom: 15px;">
                        {{ testResult.message }}
                    </p>
                    <div v-if="testResult.details" style="text-align: left; background: #f5f5f5; padding: 10px; border-radius: 4px; font-size: 14px;">
                        <p><strong>响应时间：</strong>{{ testResult.details.responseTime }}ms</p>
                        <p><strong>测试时间：</strong>{{ testResult.details.testTime }}</p>
                    </div>
                </div>
                <template #footer>
                    <el-button @@click="showTestDialog = false">关闭</el-button>
                    <el-button v-if="!testResult.success" type="primary" @@click="testConnection">重新测试</el-button>
                </template>
            </el-dialog>
        </div>
    </div>

  
@*     <script src="https://unpkg.com/vue@@3/dist/vue.global.js"></script>
    <script src="https://unpkg.com/element-plus@@2.4.4/dist/index.full.js"></script>
    <script src="https://unpkg.com/@@element-plus/icons-vue/dist/index.iife.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script> *@

    <script>
        const { createApp } = Vue;
        const { ElMessage, ElMessageBox, ElNotification } = ElementPlus;

        createApp({
            data() {
                return {
                    appReady: false,
                    loading: false,
                    saving: false,
                    testing: false,
                    showTestDialog: false,

                    // PLC配置数据
                    plcConfig: {
                        ipAddress: '192.168.1.10',
                        port: 6000,
                        networkNumber: 0,
                        stationNumber: 0,
                        connectTimeout: 5000,
                        receiveTimeout: 3000,
                        pollInterval: 1000,
                        maxRetryCount: 3,
                        reconnectInterval: 5000,
                        enableAutoReconnect: true
                    },

                    // 连接状态
                    connectionStatus: {
                        isConnected: false,
                        LastConnectedTime: null,
                        sentCount: 0,
                        receivedCount: 0,
                        errorCount: 0
                    },

                    // 测试结果
                    testResult: {
                        success: false,
                        message: '',
                        details: null
                    },

                    // 表单验证规则
                    rules: {
                        ipAddress: [
                            { required: true, message: '请输入IP地址', trigger: 'blur' },
                            {
                                pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
                                message: '请输入有效的IP地址',
                                trigger: 'blur'
                            }
                        ],
                        port: [
                            { required: true, message: '请输入端口号', trigger: 'blur' },
                            { type: 'number', min: 1, max: 65535, message: '端口号必须在1-65535之间', trigger: 'blur' }
                        ]
                    }
                };
            },

            async mounted() {
                try {
                    await this.loadPLCConfig();
                    await this.loadConnectionStatus();

                    // 定期更新连接状态
                    setInterval(() => {
                        this.loadConnectionStatus();
                    }, 5000);

                    this.appReady = true;
                } catch (error) {
                    console.error('页面初始化失败:', error);
                    this.appReady = true; // 即使失败也显示页面
                }
            },

            methods: {
                // 加载PLC配置
                async loadPLCConfig() {
                    try {
                        this.loading = true;
                        const response = await axios.get('/Config/GetPLCConfig');

                        if (response.data && response.data.success && response.data.data) {
                            this.plcConfig = { ...this.plcConfig, ...response.data.data };
                        }
                    } catch (error) {
                        console.error('加载PLC配置错误:', error);
                        ElMessage.warning('加载配置失败，使用默认配置');
                    } finally {
                        this.loading = false;
                    }
                },

                // 加载连接状态
                async loadConnectionStatus() {
                    try {
                        const response = await axios.get('/Config/GetPLCStatus');
                        console.log(response);
                        if (response.data && response.data.success) {
                            this.connectionStatus = {
                                ...this.connectionStatus,
                                ...response.data.data
                            };
                        }
                    } catch (error) {
                        console.error('加载连接状态错误:', error);
                        // 静默失败，不显示错误消息
                    }
                },

                // 保存PLC配置
                async savePLCConfig() {
                    try {
                        if (this.$refs.configForm) {
                            const isValid = await this.$refs.configForm.validate();
                            if (!isValid) return;
                        }

                        this.saving = true;
                        const response = await axios.post('/Config/SavePLCConfig', this.plcConfig);

                        if (response.data && response.data.success) {
                            ElMessage.success('PLC配置保存成功');
                        } else {
                            ElMessage.error('保存失败: ' + (response.data?.message || '未知错误'));
                        }
                    } catch (error) {
                        console.error('保存PLC配置错误:', error);
                        ElMessage.error('保存配置失败');
                    } finally {
                        this.saving = false;
                    }
                },

                // 测试连接
                async testConnection() {
                    try {
                        if (this.$refs.configForm) {
                            const isValid = await this.$refs.configForm.validate();
                            if (!isValid) {
                                ElMessage.warning('请先修正配置错误');
                                return;
                            }
                        }

                        this.testing = true;
                        const response = await axios.post('/Config/TestPLCConnection', this.plcConfig);

                        this.testResult = {
                            success: response.data?.success || false,
                            message: response.data?.message || '测试完成',
                            details: response.data?.data || null
                        };

                        this.showTestDialog = true;

                        if (response.data?.success) {
                            await this.loadConnectionStatus();
                        }
                    } catch (error) {
                        console.error('测试连接错误:', error);
                        this.testResult = {
                            success: false,
                            message: '连接测试失败: ' + (error.response?.data?.message || error.message),
                            details: null
                        };
                        this.showTestDialog = true;
                    } finally {
                        this.testing = false;
                    }
                },

                // 重置配置
                async resetConfig() {
                    try {
                        await ElMessageBox.confirm(
                            '确定要重置PLC配置吗？此操作将恢复默认设置。',
                            '重置确认',
                            {
                                confirmButtonText: '确定',
                                cancelButtonText: '取消',
                                type: 'warning',
                            }
                        );

                        this.plcConfig = {
                            ipAddress: '192.168.1.10',
                            port: 6000,
                            networkNumber: 0,
                            stationNumber: 0,
                            connectTimeout: 5000,
                            receiveTimeout: 3000,
                            pollInterval: 1000,
                            maxRetryCount: 3,
                            reconnectInterval: 5000,
                            enableAutoReconnect: true
                        };

                        ElMessage.success('配置已重置为默认值');
                    } catch {
                        // 用户取消操作
                    }
                },

                // 格式化连接时间
                formatConnectionTime(time) {
                    console.log(time);
                    if (!time) return '未连接';

                    try {
                        const now = new Date();
                        const connectedTime = new Date(time);
                        const diff = now - connectedTime;

                        const seconds = Math.floor(diff / 1000);
                        const minutes = Math.floor(seconds / 60);
                        const hours = Math.floor(minutes / 60);

                        if (hours > 0) {
                            return `${hours}小时${minutes % 60}分钟`;
                        } else if (minutes > 0) {
                            return `${minutes}分钟`;
                        } else {
                            return `${seconds}秒`;
                        }
                    } catch {
                        return '未知';
                    }
                }
            }
        }).use(ElementPlus).mount('#app');
    </script>
</body>
</html>