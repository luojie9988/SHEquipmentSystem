<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>设备配置管理 - SH设备配置系统</title>

    <!-- Element Plus CSS -->
    <link rel="stylesheet" href="https://unpkg.com/element-plus/dist/index.css" />

    <!-- 自定义样式 -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .equipment-container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .page-header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 24px 32px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .page-title {
            font-size: 24px;
            font-weight: bold;
            margin: 0;
        }

        .page-subtitle {
            font-size: 14px;
            opacity: 0.9;
            margin-top: 4px;
        }

        .header-actions {
            display: flex;
            gap: 12px;
        }

        .page-content {
            padding: 32px;
        }

        .status-panel {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 24px;
            border-radius: 12px;
            margin-bottom: 24px;
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 16px;
        }

        .status-item {
            background: rgba(255,255,255,0.1);
            padding: 16px;
            border-radius: 8px;
            backdrop-filter: blur(10px);
        }

        .status-label {
            font-size: 14px;
            opacity: 0.8;
            margin-bottom: 8px;
        }

        .status-value {
            font-size: 18px;
            font-weight: bold;
        }

        .connection-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .connection-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .connected {
            background-color: #52c41a;
        }

        .connecting {
            background-color: #faad14;
        }

        .disconnected {
            background-color: #ff4d4f;
        }

        keyframes pulse {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }

        }

        .config-sections {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-top: 24px;
        }

        media (max-width: 1200px) {
            .config-sections

        {
            grid-template-columns: 1fr;
        }

        }

        .config-card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 24px;
            border: 1px solid #e9ecef;
        }

        .card-title {
            font-size: 18px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .control-section {
            grid-column: 1 / -1;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            border-radius: 12px;
            padding: 24px;
            margin-top: 24px;
        }

        .control-buttons {
            display: flex;
            gap: 16px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .statistics-panel {
            margin-top: 24px;
            background: #f8f9fa;
            border-radius: 12px;
            padding: 24px;
        }

        .log-viewer {
            max-height: 300px;
            overflow-y: auto;
            background: #1e1e1e;
            color: #fff;
            padding: 16px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.4;
        }

        .log-entry {
            margin-bottom: 4px;
        }

        .log-time {
            color: #888;
        }

        .log-level-info {
            color: #4fc3f7;
        }

        .log-level-warn {
            color: #ffb74d;
        }

        .log-level-error {
            color: #f44336;
        }
    </style>
</head>
<body>
    <div id="equipment-app" class="equipment-container">
        <!-- 页面头部 -->
        <header class="page-header">
            <div>
                <h1 class="page-title">设备配置管理</h1>
                <div class="page-subtitle">SECS/GEM 设备连接配置与控制</div>
            </div>
            <div class="header-actions">
                <el-button type="primary" :icon="Refresh" v-on:click="refreshData" :loading="loading.refresh">
                    刷新状态
                </el-button>
                <el-button type="success" :icon="Download" v-on:click="exportConfig">
                    导出配置
                </el-button>
            </div>
        </header>

        <!-- 页面内容 -->
        <main class="page-content">
            <!-- 连接状态面板 -->
            <div class="status-panel">
                <h2 style="margin-bottom: 0; font-size: 20px;">设备连接状态</h2>
                <div class="status-grid">
                    <div class="status-item">
                        <div class="status-label">连接状态</div>
                        <div class="status-value">
                            <div class="connection-indicator">
                                <div class="connection-dot" ></div>
                                {{ getConnectionText() }}
                            </div>
                        </div>
                    </div>
                    <div class="status-item">
                        <div class="status-label">设备ID</div>
                        <div class="status-value">{{ deviceStatus.deviceId || 'N/A' }}</div>
                    </div>
                    <div class="status-item">
                        <div class="status-label">最后连接时间</div>
                        <div class="status-value">{{ formatTime(deviceStatus.lastConnectedTime) }}</div>
                    </div>
                    <div class="status-item">
                        <div class="status-label">连接统计</div>
                        <div class="status-value">发送: {{ statistics.messagesSent || 0 }} / 接收: {{ statistics.messagesReceived || 0 }}</div>
                    </div>
                </div>
            </div>

            <!-- 配置表单区域 -->
            <div class="config-sections">
                <!-- 设备基本信息 -->
                <div class="config-card">
                    <h3 class="card-title">
                        <el-icon><Setting /></el-icon>
                        设备基本信息
                    </h3>
                    <el-form :model="equipmentConfig.equipment" :rules="equipmentRules" ref="equipmentForm" label-width="120px">
                        <el-form-item label="设备ID" prop="deviceId">
                            <el-input-number v-model="equipmentConfig.equipment.deviceId"
                                             :min="1"
                                             :max="32767"
                                             style="width: 100%">
                            </el-input-number>
                        </el-form-item>
                        <el-form-item label="设备名称" prop="equipmentName">
                            <el-input v-model="equipmentConfig.equipment.equipmentName" placeholder="请输入设备名称"></el-input>
                        </el-form-item>
                        <el-form-item label="型号名称" prop="modelName">
                            <el-input v-model="equipmentConfig.equipment.modelName" placeholder="请输入型号名称"></el-input>
                        </el-form-item>
                        <el-form-item label="软件版本" prop="softwareRevision">
                            <el-input v-model="equipmentConfig.equipment.softwareRevision" placeholder="请输入软件版本"></el-input>
                        </el-form-item>
                    </el-form>
                </div>

                <!-- 网络连接配置 -->
                <div class="config-card">
                    <h3 class="card-title">
                        <el-icon><Connection /></el-icon>
                        网络连接配置
                    </h3>
                    <el-form :model="equipmentConfig.equipment" :rules="networkRules" ref="networkForm" label-width="120px">
                        <el-form-item label="IP地址" prop="ipAddress">
                            <el-input v-model="equipmentConfig.equipment.ipAddress" placeholder="请输入IP地址"></el-input>
                        </el-form-item>
                        <el-form-item label="端口号" prop="port">
                            <el-input-number v-model="equipmentConfig.equipment.port"
                                             :min="1"
                                             :max="65535"
                                             style="width: 100%">
                            </el-input-number>
                        </el-form-item>
                        <el-form-item label="连接模式" prop="isActive">
                            <el-radio-group v-model="equipmentConfig.equipment.isActive">
                                <el-radio :label="false">被动模式 (Passive)</el-radio>
                                <el-radio :label="true">主动模式 (Active)</el-radio>
                            </el-radio-group>
                        </el-form-item>
                        <el-form-item label="自动上线" prop="autoOnline">
                            <el-switch v-model="equipmentConfig.equipment.autoOnline"></el-switch>
                        </el-form-item>
                    </el-form>
                </div>

                <!-- HSMS超时参数 -->
                <div class="config-card">
                    <h3 class="card-title">
                        <el-icon><Clock /></el-icon>
                        HSMS超时参数
                    </h3>
                    <el-form :model="equipmentConfig.equipment" label-width="120px">
                        <el-form-item label="T3超时(ms)" prop="t3">
                            <el-input-number v-model="equipmentConfig.equipment.t3"
                                             :min="1000"
                                             :max="120000"
                                             :step="1000"
                                             style="width: 100%">
                            </el-input-number>
                        </el-form-item>
                        <el-form-item label="T5超时(ms)" prop="t5">
                            <el-input-number v-model="equipmentConfig.equipment.t5"
                                             :min="1000"
                                             :max="60000"
                                             :step="1000"
                                             style="width: 100%">
                            </el-input-number>
                        </el-form-item>
                        <el-form-item label="T6超时(ms)" prop="t6">
                            <el-input-number v-model="equipmentConfig.equipment.t6"
                                             :min="1000"
                                             :max="60000"
                                             :step="1000"
                                             style="width: 100%">
                            </el-input-number>
                        </el-form-item>
                        <el-form-item label="T7超时(ms)" prop="t7">
                            <el-input-number v-model="equipmentConfig.equipment.t7"
                                             :min="1000"
                                             :max="60000"
                                             :step="1000"
                                             style="width: 100%">
                            </el-input-number>
                        </el-form-item>
                    </el-form>
                </div>

                <!-- 控制状态配置 -->
                <div class="config-card">
                    <h3 class="card-title">
                        <el-icon><Monitor /></el-icon>
                        控制状态配置
                    </h3>
                    <el-form :model="equipmentConfig.equipment" label-width="120px">
                        <el-form-item label="默认控制状态">
                            <el-select v-model="equipmentConfig.equipment.defaultControlState" style="width: 100%">
                                <el-option label="离线 (Offline)" value="Offline"></el-option>
                                <el-option label="本地 (OnlineLocal)" value="OnlineLocal"></el-option>
                                <el-option label="远程 (OnlineRemote)" value="OnlineRemote"></el-option>
                            </el-select>
                        </el-form-item>
                        <el-form-item label="LinkTest间隔">
                            <el-input-number v-model="equipmentConfig.equipment.linkTestInterval"
                                             :min="10000"
                                             :max="300000"
                                             :step="1000"
                                             style="width: 100%">
                            </el-input-number>
                            <div style="font-size: 12px; color: #999; margin-top: 4px;">毫秒 (建议: 60000ms)</div>
                        </el-form-item>
                    </el-form>
                </div>
            </div>

            <!-- 连接控制区域 -->
            <div class="control-section">
                <h3 style="text-align: center; margin-bottom: 20px; color: white;">连接控制</h3>
                <div class="control-buttons">
                    <el-button type="success"
                               size="large"
                               :icon="VideoPlay"
                               v-on:click="startConnection"
                               :loading="loading.start"
                               :disabled="deviceStatus.isConnected">
                        启动连接
                    </el-button>
                    <el-button type="danger"
                               size="large"
                               :icon="VideoPause"
                               v-on:click="stopConnection"
                               :loading="loading.stop"
                               :disabled="!deviceStatus.isConnected">
                        停止连接
                    </el-button>
                    <el-button type="primary"
                               size="large"
                               :icon="Connection"
                               v-on:click="testConnection"
                               :loading="loading.test">
                        测试连接
                    </el-button>
                    <el-button type="warning"
                               size="large"
                               :icon="Check"
                               v-on:click="validateConfig"
                               :loading="loading.validate">
                        验证配置
                    </el-button>
                    <el-button type="info"
                               size="large"
                               :icon="Document"
                               v-on:click="saveConfig"
                               :loading="loading.save">
                        保存配置
                    </el-button>
                </div>
            </div>

            <!-- 统计信息面板 -->
            <div class="statistics-panel">
                <h3 class="card-title">
                    <el-icon><DataAnalysis /></el-icon>
                    连接统计信息
                </h3>
                <el-row :gutter="20">
                    <el-col :span="6">
                        <el-statistic title="消息发送" :value="statistics.messagesSent || 0" />
                    </el-col>
                    <el-col :span="6">
                        <el-statistic title="消息接收" :value="statistics.messagesReceived || 0" />
                    </el-col>
                    <el-col :span="6">
                        <el-statistic title="连接次数" :value="statistics.connectionCount || 0" />
                    </el-col>
                    <el-col :span="6">
                        <el-statistic title="运行时间" :value="getUptime()" suffix="小时" />
                    </el-col>
                </el-row>
            </div>

            <!-- 日志查看器 -->
            <div class="statistics-panel">
                <h3 class="card-title">
                    <el-icon><Document /></el-icon>
                    系统日志
                    <el-button size="small" v-on:click="clearLogs" style="margin-left: auto;">清空日志</el-button>
                </h3>
                <div class="log-viewer" ref="logViewer">
                    <div v-for="(log, index) in logs" :key="index" class="log-entry">
                        <span class="log-time">{{ log.time }}</span>
                        <span :class="'log-level-' + log.level">[{{ log.level.toUpperCase() }}]</span>
                        {{ log.message }}
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Vue.js 和 Element Plus -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://unpkg.com/element-plus/dist/index.full.js"></script>
    <script src="https://unpkg.com/@@element-plus/icons-vue/dist/index.iife.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <script>
        const { createApp } = Vue;
        const { ElMessage, ElMessageBox, ElNotification } = ElementPlus;

        // 获取所有图标
        const icons = ElementPlusIconsVue;

        createApp({
            data() {
                return {
                    // 设备配置数据
                    equipmentConfig: {
                        equipment: {
                            deviceId: 10,
                            equipmentName: 'Dicer010',
                            modelName: 'AIMFAB0',
                            softwareRevision: 'V01R01',
                            ipAddress: '127.0.0.10',
                            port: 5000,
                            isActive: false,
                            t3: 45000,
                            t5: 10000,
                            t6: 5000,
                            t7: 10000,
                            linkTestInterval: 60000,
                            autoOnline: true,
                            defaultControlState: 'OnlineRemote'
                        }
                    },

                    // 设备状态
                    deviceStatus: {
                        isConnected: false,
                        connectionStatus: 'Disconnected',
                        lastConnectedTime: null,
                        lastDisconnectedTime: null,
                        deviceId: null
                    },

                    // 统计信息
                    statistics: {
                        messagesSent: 0,
                        messagesReceived: 0,
                        connectionCount: 0,
                        uptime: 0
                    },

                    // 加载状态
                    loading: {
                        refresh: false,
                        start: false,
                        stop: false,
                        test: false,
                        validate: false,
                        save: false
                    },

                    // 日志数据
                    logs: [],

                    // 状态刷新定时器
                    statusTimer: null,

                    // 表单验证规则
                    equipmentRules: {
                        deviceId: [
                            { required: true, message: '请输入设备ID', trigger: 'blur' },
                            { type: 'number', min: 1, max: 32767, message: '设备ID必须在1-32767之间', trigger: 'blur' }
                        ],
                        equipmentName: [
                            { required: true, message: '请输入设备名称', trigger: 'blur' },
                            { min: 1, max: 50, message: '长度在1到50个字符', trigger: 'blur' }
                        ],
                        modelName: [
                            { required: true, message: '请输入型号名称', trigger: 'blur' }
                        ]
                    },

                    networkRules: {
                        ipAddress: [
                            { required: true, message: '请输入IP地址', trigger: 'blur' },
                            { pattern: /^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$/, message: '请输入正确的IP地址格式', trigger: 'blur' }
                        ],
                        port: [
                            { required: true, message: '请输入端口号', trigger: 'blur' },
                            { type: 'number', min: 1, max: 65535, message: '端口号必须在1-65535之间', trigger: 'blur' }
                        ]
                    }
                };
            },

            computed: {
                // 获取连接状态CSS类
                getConnectionClass() {
                    return () => {
                         console.log(this.deviceStatus.connectionStatus)
                        switch (this.deviceStatus.connectionStatus) {
                            case 2: return 'connected';
                            case 1: return 'connecting';
                            default: return 'disconnected';
                        }
                    };
                },

                // 获取连接状态文本
                getConnectionText() {
                    return () => {
                        const statusMap = {
                            'connected': '已连接',
                            'connecting': '连接中',
                            'disconnected': '未连接',
                            'Error': '连接错误'
                        };
                        var state= this.getConnectionClass();
                        console.log(state)
                        return statusMap[state] || '未知';
                    };
                }
            },

            methods: {
                // 初始化加载数据
                async init() {
                    await this.loadEquipmentConfig();
                    await this.refreshStatus();
                    this.startStatusPolling();
                    this.addLog('info', '设备配置管理界面已加载');
                },

                // 加载设备配置
                async loadEquipmentConfig() {
                    try {
                        const response = await axios.get('/Config/GetEquipmentConfig');
                        if (response.data.success) {
                            this.equipmentConfig = response.data.data.configuration;
                            console.log(response);
                            this.deviceStatus = {
                                isConnected: response.data.data.isConnected,
                                connectionStatus: response.data.data.connectionStatus,
                                lastConnectedTime: response.data.data.lastConnectedTime,
                                deviceId: response.data.data.configuration?.equipment?.deviceId
                            };
                            this.statistics = response.data.data.connectionStatistics || {};
                            this.addLog('info', '设备配置加载成功');
                        } else {
                            throw new Error(response.data.message);
                        }
                    } catch (error) {
                        this.addLog('error', '加载设备配置失败: ' + error.message);
                        ElMessage.error('加载配置失败: ' + error.message);
                    }
                },

                // 刷新设备状态
                async refreshStatus() {
                    try {
                        const response = await axios.get('/Config/GetEquipmentStatus');
                        if (response.data.success) {
                            //this.deviceStatus.i = response.data.data;
                            this.statistics = response.data.data.connectionStatistics || {};
                            this.deviceStatus.lastConnectedTime=response.data.data.lastConnectedTime;
                        }
                    } catch (error) {
                        console.error('刷新状态失败:', error);
                    }
                },

                // 刷新数据
                async refreshData() {
                    this.loading.refresh = true;
                    try {
                        await this.loadEquipmentConfig();
                        await this.refreshStatus();
                        ElMessage.success('数据刷新成功');
                        this.addLog('info', '数据刷新成功');
                    } catch (error) {
                        ElMessage.error('数据刷新失败');
                        this.addLog('error', '数据刷新失败: ' + error.message);
                    } finally {
                        this.loading.refresh = false;
                    }
                },

                // 启动连接
                async startConnection() {
                    this.loading.start = true;
                    try {
                        const response = await axios.post('/Config/StartConnection', this.equipmentConfig);
                        if (response.data.success) {
                            ElMessage.success('连接启动成功');
                            this.addLog('info', 'SECS连接启动成功');
                            await this.refreshStatus();
                        } else {
                            throw new Error(response.data.message);
                        }
                    } catch (error) {
                        ElMessage.error('启动连接失败: ' + error.message);
                        this.addLog('error', '启动连接失败: ' + error.message);
                    } finally {
                        this.loading.start = false;
                    }
                },

                // 停止连接
                async stopConnection() {
                    this.loading.stop = true;
                    try {
                        const response = await axios.post('/Config/StopConnection');
                        if (response.data.success) {
                            ElMessage.success('连接停止成功');
                            this.addLog('info', 'SECS连接停止成功');
                            await this.refreshStatus();
                        } else {
                            throw new Error(response.data.message);
                        }
                    } catch (error) {
                        ElMessage.error('停止连接失败: ' + error.message);
                        this.addLog('error', '停止连接失败: ' + error.message);
                    } finally {
                        this.loading.stop = false;
                    }
                },

                // 测试连接
                async testConnection() {
                    this.loading.test = true;
                    try {
                        const response = await axios.post('/Config/TestConnection', this.equipmentConfig);
                        if (response.data.success) {
                            ElMessage.success(`连接测试成功 (响应时间: ${response.data.data.responseTime}ms)`);
                            this.addLog('info', `连接测试成功，响应时间: ${response.data.data.responseTime}ms`);
                        } else {
                            throw new Error(response.data.message);
                        }
                    } catch (error) {
                        ElMessage.error('连接测试失败: ' + error.message);
                        this.addLog('error', '连接测试失败: ' + error.message);
                    } finally {
                        this.loading.test = false;
                    }
                },

                // 验证配置
                async validateConfig() {
                    this.loading.validate = true;
                    try {
                        const response = await axios.post('/Config/ValidateEquipmentConfig', this.equipmentConfig);
                        if (response.data.success) {
                            ElMessage.success('配置验证通过');
                            this.addLog('info', '设备配置验证通过');

                            if (response.data.warnings && response.data.warnings.length > 0) {
                                response.data.warnings.forEach(warning => {
                                    ElMessage.warning(warning);
                                    this.addLog('warn', warning);
                                });
                            }
                        } else {
                            const errors = response.data.errors?.join('; ') || response.data.message;
                            throw new Error(errors);
                        }
                    } catch (error) {
                        ElMessage.error('配置验证失败: ' + error.message);
                        this.addLog('error', '配置验证失败: ' + error.message);
                    } finally {
                        this.loading.validate = false;
                    }
                },

                // 保存配置
                async saveConfig() {
                    this.loading.save = true;
                    try {
                        // 先验证表单
                        await this.$refs.equipmentForm.validate();
                        await this.$refs.networkForm.validate();

                        const response = await axios.post('/Config/SaveEquipmentConfig', this.equipmentConfig);
                        if (response.data.success) {
                            ElMessage.success('配置保存成功');
                            this.addLog('info', '设备配置保存成功');
                        } else {
                            throw new Error(response.data.message);
                        }
                    } catch (error) {
                        ElMessage.error('保存配置失败: ' + error.message);
                        this.addLog('error', '保存配置失败: ' + error.message);
                    } finally {
                        this.loading.save = false;
                    }
                },

                // 导出配置
                exportConfig() {
                    const configData = JSON.stringify(this.equipmentConfig, null, 2);
                    const blob = new Blob([configData], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `equipment-config-${new Date().toISOString().split('T')[0]}.json`;
                    a.click();
                    URL.revokeObjectURL(url);
                    this.addLog('info', '设备配置已导出');
                },

                // 格式化时间
                formatTime(time) {
                    if (!time) return 'N/A';
                    return new Date(time).toLocaleString('zh-CN');
                },

                // 获取运行时间
                getUptime() {
                    if (!this.deviceStatus.lastConnectedTime || !this.deviceStatus.isConnected) return 0;
                    const uptime = (Date.now() - new Date(this.deviceStatus.lastConnectedTime)) / (1000 * 60 * 60);
                    return Math.round(uptime * 100) / 100;
                },

                // 添加日志
                addLog(level, message) {
                    const now = new Date();
                    this.logs.unshift({
                        time: now.toLocaleTimeString('zh-CN'),
                        level: level,
                        message: message
                    });

                    // 限制日志数量
                    if (this.logs.length > 100) {
                        this.logs = this.logs.slice(0, 100);
                    }

                    // 自动滚动到顶部
                    this.$nextTick(() => {
                        if (this.$refs.logViewer) {
                            this.$refs.logViewer.scrollTop = 0;
                        }
                    });
                },

                // 清空日志
                clearLogs() {
                    this.logs = [];
                    this.addLog('info', '日志已清空');
                },

                // 开始状态轮询
                startStatusPolling() {
                    this.statusTimer = setInterval(() => {
                        this.refreshStatus();
                    }, 5000); // 每5秒刷新一次状态
                },

                // 停止状态轮询
                stopStatusPolling() {
                    if (this.statusTimer) {
                        clearInterval(this.statusTimer);
                        this.statusTimer = null;
                    }
                }
            },

            async mounted() {
                // 注册Element Plus图标
                Object.keys(icons).forEach(key => {
                    this.app.component(key, icons[key]);
                });

                await this.init();
            },

            beforeUnmount() {
                this.stopStatusPolling();
            }
        }).use(ElementPlus).mount('#equipment-app');
    </script>
</body>
</html>