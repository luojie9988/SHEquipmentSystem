<el-card class="config-card" header="报告和事件配置">
    <el-tabs v-model="reportsActiveTab" class="reports-tabs">
        <!-- 默认报告配置 -->
        <el-tab-pane label="默认报告" name="reports">
            <div class="reports-section">
                <!-- 报告操作工具栏 -->
                <div class="section-toolbar">
                    <el-button type="primary" onclick="addReport">
                        <el-icon><Plus /></el-icon>添加报告
                    </el-button>
                    <el-button onclick="importReports">
                        <el-icon><Upload /></el-icon>导入报告
                    </el-button>
                    <el-button onclick="exportReports">
                        <el-icon><Download /></el-icon>导出报告
                    </el-button>
                </div>

                <!-- 报告列表 -->
                <el-table :data="defaultReports" style="width: 100%" border>
                    <el-table-column prop="reportId" label="报告ID" width="100" sortable>
                        <template #default="scope">
                            <el-input-number
                                v-if="scope.row.editing"
                                v-model="scope.row.reportId"
                                :min="1"
                                :max="65535"
                                size="small"
                                style="width: 100%">
                            </el-input-number>
                            <el-tag v-else type="primary" size="small">{{ scope.row.reportId }}</el-tag>
                        </template>
                    </el-table-column>
                    
                    <el-table-column prop="description" label="报告描述" min-width="200">
                        <template #default="scope">
                            <el-input
                                v-if="scope.row.editing"
                                v-model="scope.row.description"
                                placeholder="请输入报告描述"
                                size="small">
                            </el-input>
                            <span v-else>{{ scope.row.description }}</span>
                        </template>
                    </el-table-column>
                    
                    <el-table-column label="变量ID列表" min-width="300">
                        <template #default="scope">
                            <div v-if="scope.row.editing">
                                <el-space wrap>
                                    <el-input-number
                                        v-for="(vid, index) in scope.row.variableIds"
                                        :key="index"
                                        v-model="scope.row.variableIds[index]"
                                        :min="1"
                                        :max="65535"
                                        size="small"
                                        style="width: 80px; margin: 2px;">
                                    </el-input-number>
                                    <el-button size="small" onclick="addVariableId(scope.row)">
                                        <el-icon><Plus /></el-icon>
                                    </el-button>
                                </el-space>
                            </div>
                            <el-space v-else wrap>
                                <el-tag
                                    v-for="vid in scope.row.variableIds"
                                    :key="vid"
                                    size="small"
                                    closable
                                    onclose="removeVariableId(scope.row, vid)"
                                    style="margin: 2px;">
                                    {{ vid }}
                                </el-tag>
                            </el-space>
                        </template>
                    </el-table-column>
                    
                    <el-table-column label="操作" width="200" fixed="right">
                        <template #default="scope">
                            <el-button-group v-if="!scope.row.editing">
                                <el-button size="small" onclick="editReport(scope.$index)">
                                    <el-icon><Edit /></el-icon>编辑
                                </el-button>
                                <el-button size="small" onclick="testReport(scope.row)">
                                    <el-icon><View /></el-icon>测试
                                </el-button>
                                @* <el-popconfirm title="确定删除这个报告吗？" @confirm="deleteReport(scope.$index)"> *@
                                    <template #reference>
                                        <el-button size="small" type="danger">
                                            <el-icon><Delete /></el-icon>删除
                                        </el-button>
                                    </template>
                                </el-popconfirm>
                            </el-button-group>
                            
                            <el-button-group v-else>
                                <el-button size="small" type="primary" onclick="saveReport(scope.$index)">
                                    <el-icon><Check /></el-icon>保存
                                </el-button>
                                <el-button size="small" onclick="cancelEditReport(scope.$index)">
                                    <el-icon><Close /></el-icon>取消
                                </el-button>
                            </el-button-group>
                        </template>
                    </el-table-column>
                </el-table>
            </div>
        </el-tab-pane>

        <!-- 默认事件链接 -->
        <el-tab-pane label="事件链接" name="events">
            <div class="events-section">
                <!-- 事件操作工具栏 -->
                <div class="section-toolbar">
                    <el-button type="primary" onclick="addEventLink">
                        <el-icon><Plus /></el-icon>添加事件链接
                    </el-button>
                    <el-button onclick="loadEventTemplates">
                        <el-icon><Document /></el-icon>加载模板
                    </el-button>
                    <el-button onclick="validateEventLinks">
                        <el-icon><Warning /></el-icon>验证链接
                    </el-button>
                </div>

                <!-- 事件链接列表 -->
                <el-table :data="defaultEventLinks" style="width: 100%" border>
                    <el-table-column prop="eventId" label="事件ID" width="100" sortable>
                        <template #default="scope">
                            <el-input-number
                                v-if="scope.row.editing"
                                v-model="scope.row.eventId"
                                :min="1"
                                :max="65535"
                                size="small"
                                style="width: 100%">
                            </el-input-number>
                            <el-tag v-else :type="getEventTypeColor(scope.row.eventId)" size="small">
                                {{ scope.row.eventId }}
                            </el-tag>
                        </template>
                    </el-table-column>
                    
                    <el-table-column prop="description" label="事件描述" min-width="200">
                        <template #default="scope">
                            <el-input
                                v-if="scope.row.editing"
                                v-model="scope.row.description"
                                placeholder="请输入事件描述"
                                size="small">
                            </el-input>
                            <span v-else>{{ scope.row.description }}</span>
                        </template>
                    </el-table-column>
                    
                    <el-table-column label="关联报告ID" min-width="250">
                        <template #default="scope">
                            <div v-if="scope.row.editing">
                                <el-space wrap>
                                    <el-select
                                        v-for="(rptId, index) in scope.row.reportIds"
                                        :key="index"
                                        v-model="scope.row.reportIds[index]"
                                        size="small"
                                        style="width: 100px; margin: 2px;">
                                        <el-option
                                            v-for="report in defaultReports"
                                            :key="report.reportId"
                                            :label="report.reportId"
                                            :value="report.reportId">
                                        </el-option>
                                    </el-select>
                                    <el-button size="small" onclick="addReportId(scope.row)">
                                        <el-icon><Plus /></el-icon>
                                    </el-button>
                                </el-space>
                            </div>
                            <el-space v-else wrap>
                                <el-tag
                                    v-for="rptId in scope.row.reportIds"
                                    :key="rptId"
                                    size="small"
                                    closable
                                    onclose="removeReportId(scope.row, rptId)"
                                    style="margin: 2px;">
                                    RptID: {{ rptId }}
                                </el-tag>
                            </el-space>
                        </template>
                    </el-table-column>
                    
                    <el-table-column label="事件类型" width="120">
                        <template #default="scope">
                            <el-tag :type="getEventCategoryColor(scope.row.eventId)" size="small">
                                {{ getEventCategory(scope.row.eventId) }}
                            </el-tag>
                        </template>
                    </el-table-column>
                    
                    <el-table-column label="操作" width="200" fixed="right">
                        <template #default="scope">
                            <el-button-group v-if="!scope.row.editing">
                                <el-button size="small" onclick="editEventLink(scope.$index)">
                                    <el-icon><Edit /></el-icon>编辑
                                </el-button>
                                <el-button size="small" onclick="testEventLink(scope.row)">
                                    <el-icon><Bell /></el-icon>测试
                                </el-button>
                               @*  <el-popconfirm title="确定删除这个事件链接吗？" @confirm="deleteEventLink(scope.$index)">
                                    <template #reference>
                                        <el-button size="small" type="danger">
                                            <el-icon><Delete /></el-icon>删除
                                        </el-button>
                                    </template>
                                </el-popconfirm> *@
                            </el-button-group>
                            
                            <el-button-group v-else>
                                <el-button size="small" type="primary" onclick="saveEventLink(scope.$index)">
                                    <el-icon><Check /></el-icon>保存
                                </el-button>
                                <el-button size="small" onclick="cancelEditEventLink(scope.$index)">
                                    <el-icon><Close /></el-icon>取消
                                </el-button>
                            </el-button-group>
                        </template>
                    </el-table-column>
                </el-table>
            </div>
        </el-tab-pane>

        <!-- 事件配置概览 -->
        <el-tab-pane label="配置概览" name="overview">
            <div class="overview-section">
                <el-row :gutter="24">
                    <!-- 报告统计 -->
                    <el-col :span="12">
                        <el-card class="overview-card">
                            <template #header>
                                <span>报告配置统计</span>
                            </template>
                            <el-descriptions :column="1">
                                <el-descriptions-item label="总报告数">
                                    <el-tag type="primary">{{ defaultReports.length }}</el-tag>
                                </el-descriptions-item>
                                <el-descriptions-item label="平均变量数">
                                    <el-tag type="info">{{ averageVariablesPerReport }}</el-tag>
                                </el-descriptions-item>
                                <el-descriptions-item label="最大报告ID">
                                    <el-tag type="success">{{ maxReportId }}</el-tag>
                                </el-descriptions-item>
                            </el-descriptions>
                            
                            <div style="margin-top: 20px;">
                                <h4>变量使用统计</h4>
                                <el-progress
                                    v-for="(count, vid) in topVariables"
                                    :key="vid"
                                    :percentage="(count / defaultReports.length) * 100"
                                    :format="() => `VID ${vid}: ${count}次`"
                                    style="margin: 5px 0;">
                                </el-progress>
                            </div>
                        </el-card>
                    </el-col>

                    <!-- 事件统计 -->
                    <el-col :span="12">
                        <el-card class="overview-card">
                            <template #header>
                                <span>事件配置统计</span>
                            </template>
                            <el-descriptions :column="1">
                                <el-descriptions-item label="总事件数">
                                    <el-tag type="primary">{{ defaultEventLinks.length }}</el-tag>
                                </el-descriptions-item>
                                <el-descriptions-item label="平均链接数">
                                    <el-tag type="info">{{ averageLinksPerEvent }}</el-tag>
                                </el-descriptions-item>
                                <el-descriptions-item label="事件类型数">
                                    <el-tag type="success">{{ uniqueEventCategories }}</el-tag>
                                </el-descriptions-item>
                            </el-descriptions>
                            
                            <div style="margin-top: 20px;">
                                <h4>事件类型分布</h4>
                                <el-space wrap>
                                    <el-tag
                                        v-for="(count, category) in eventCategoryStats"
                                        :key="category"
                                        :type="getEventCategoryColor(category)"
                                        size="large"
                                        style="margin: 5px;">
                                        {{ category }}: {{ count }}
                                    </el-tag>
                                </el-space>
                            </div>
                        </el-card>
                    </el-col>
                </el-row>

                <!-- 配置完整性检查 -->
                <el-card style="margin-top: 20px;">
                    <template #header>
                        <span>配置完整性检查</span>
                        <el-button onclick="runIntegrityCheck" type="primary" size="small" style="float: right;">
                            <el-icon><Refresh /></el-icon>重新检查
                        </el-button>
                    </template>
                    
                    <el-alert
                        v-for="issue in integrityIssues"
                        :key="issue.id"
                        :title="issue.title"
                        :type="issue.type"
                        :description="issue.description"
                        show-icon
                        style="margin: 10px 0;">
                    </el-alert>
                    
                    <el-empty v-if="integrityIssues.length === 0" description="配置完整性检查通过">
                        <el-icon><CircleCheckFilled /></el-icon>
                    </el-empty>
                </el-card>
            </div>
        </el-tab-pane>
    </el-tabs>
</el-card>

<script>
export default {
    data() {
        return {
            reportsActiveTab: 'reports',
            integrityIssues: []
        };
    },
    
    computed: {
        averageVariablesPerReport() {
            if (this.defaultReports.length === 0) return 0;
            const totalVars = this.defaultReports.reduce((sum, report) => sum + report.variableIds.length, 0);
            return Math.round(totalVars / this.defaultReports.length * 10) / 10;
        },
        
        maxReportId() {
            return this.defaultReports.length > 0 
                ? Math.max(...this.defaultReports.map(r => r.reportId))
                : 0;
        },
        
        averageLinksPerEvent() {
            if (this.defaultEventLinks.length === 0) return 0;
            const totalLinks = this.defaultEventLinks.reduce((sum, event) => sum + event.reportIds.length, 0);
            return Math.round(totalLinks / this.defaultEventLinks.length * 10) / 10;
        },
        
        uniqueEventCategories() {
            const categories = new Set(this.defaultEventLinks.map(e => this.getEventCategory(e.eventId)));
            return categories.size;
        },
        
        topVariables() {
            const varCount = {};
            this.defaultReports.forEach(report => {
                report.variableIds.forEach(vid => {
                    varCount[vid] = (varCount[vid] || 0) + 1;
                });
            });
            
            return Object.fromEntries(
                Object.entries(varCount)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5)
            );
        },
        
        eventCategoryStats() {
            const stats = {};
            this.defaultEventLinks.forEach(event => {
                const category = this.getEventCategory(event.eventId);
                stats[category] = (stats[category] || 0) + 1;
            });
            return stats;
        }
    },
    
    mounted() {
        this.initializeDefaultData();
        this.runIntegrityCheck();
    },
    
    methods: {
        initializeDefaultData() {
            if (!this.defaultReports || this.defaultReports.length === 0) {
                this.defaultReports = [
                    { reportId: 1, variableIds: [1, 721, 722], description: "基本状态报告", editing: false },
                    { reportId: 10, variableIds: [1, 10011, 10012], description: "材料状态报告", editing: false }
                ];
            }
            
            if (!this.defaultEventLinks || this.defaultEventLinks.length === 0) {
                this.defaultEventLinks = [
                    { eventId: 200, reportIds: [1], description: "控制状态离线", editing: false },
                    { eventId: 201, reportIds: [1], description: "控制状态本地", editing: false },
                    { eventId: 202, reportIds: [1], description: "控制状态远程", editing: false },
                    { eventId: 11000, reportIds: [10], description: "材料到达", editing: false }
                ];
            }
        },
        
        // ========== 报告管理方法 ==========
        
        addReport() {
            const newId = this.maxReportId + 1;
            this.defaultReports.push({
                reportId: newId,
                variableIds: [1],
                description: `新报告${newId}`,
                editing: true
            });
        },
        
        editReport(index) {
            this.defaultReports[index].editing = true;
        },
        
        saveReport(index) {
            const report = this.defaultReports[index];
            
            if (!report.reportId || report.reportId <= 0) {
                ConfigUtils.showMessage('error', '验证失败', '报告ID必须是正整数');
                return;
            }
            
            if (!report.description.trim()) {
                ConfigUtils.showMessage('error', '验证失败', '报告描述不能为空');
                return;
            }
            
            if (report.variableIds.length === 0) {
                ConfigUtils.showMessage('error', '验证失败', '至少需要一个变量ID');
                return;
            }
            
            // 检查报告ID重复
            const duplicate = this.defaultReports.find((r, i) => i !== index && r.reportId === report.reportId);
            if (duplicate) {
                ConfigUtils.showMessage('error', '验证失败', `报告ID ${report.reportId} 已存在`);
                return;
            }
            
            report.editing = false;
            ConfigUtils.showMessage('success', '保存成功', '报告配置已保存');
        },
        
        cancelEditReport(index) {
            const report = this.defaultReports[index];
            if (!report.reportId && !report.description.trim()) {
                this.defaultReports.splice(index, 1);
            } else {
                report.editing = false;
            }
        },
        
        deleteReport(index) {
            this.defaultReports.splice(index, 1);
            ConfigUtils.showMessage('info', '删除成功', '报告已删除');
        },
        
        addVariableId(report) {
            report.variableIds.push(1);
        },
        
        removeVariableId(report, vid) {
            const index = report.variableIds.indexOf(vid);
            if (index > -1) {
                report.variableIds.splice(index, 1);
            }
        },
        
        testReport(report) {
            ConfigUtils.showNotification('info', '测试报告', 
                `正在测试报告 ${report.reportId}: ${report.description}`);
        },
        
        // ========== 事件链接管理方法 ==========
        
        addEventLink() {
            const newId = Math.max(...this.defaultEventLinks.map(e => e.eventId), 0) + 1;
            this.defaultEventLinks.push({
                eventId: newId,
                reportIds: [1],
                description: `新事件${newId}`,
                editing: true
            });
        },
        
        editEventLink(index) {
            this.defaultEventLinks[index].editing = true;
        },
        
        saveEventLink(index) {
            const eventLink = this.defaultEventLinks[index];
            
            if (!eventLink.eventId || eventLink.eventId <= 0) {
                ConfigUtils.showMessage('error', '验证失败', '事件ID必须是正整数');
                return;
            }
            
            if (!eventLink.description.trim()) {
                ConfigUtils.showMessage('error', '验证失败', '事件描述不能为空');
                return;
            }
            
            if (eventLink.reportIds.length === 0) {
                ConfigUtils.showMessage('error', '验证失败', '至少需要一个报告ID');
                return;
            }
            
            // 检查事件ID重复
            const duplicate = this.defaultEventLinks.find((e, i) => i !== index && e.eventId === eventLink.eventId);
            if (duplicate) {
                ConfigUtils.showMessage('error', '验证失败', `事件ID ${eventLink.eventId} 已存在`);
                return;
            }
            
            eventLink.editing = false;
            ConfigUtils.showMessage('success', '保存成功', '事件链接已保存');
        },
        
        cancelEditEventLink(index) {
            const eventLink = this.defaultEventLinks[index];
            if (!eventLink.eventId && !eventLink.description.trim()) {
                this.defaultEventLinks.splice(index, 1);
            } else {
                eventLink.editing = false;
            }
        },
        
        deleteEventLink(index) {
            this.defaultEventLinks.splice(index, 1);
            ConfigUtils.showMessage('info', '删除成功', '事件链接已删除');
        },
        
        addReportId(eventLink) {
            if (this.defaultReports.length > 0) {
                eventLink.reportIds.push(this.defaultReports[0].reportId);
            }
        },
        
        removeReportId(eventLink, rptId) {
            const index = eventLink.reportIds.indexOf(rptId);
            if (index > -1) {
                eventLink.reportIds.splice(index, 1);
            }
        },
        
        testEventLink(eventLink) {
            ConfigUtils.showNotification('info', '测试事件', 
                `正在测试事件 ${eventLink.eventId}: ${eventLink.description}`);
        },
        
        // ========== 辅助方法 ==========
        
        getEventCategory(eventId) {
            if (eventId >= 200 && eventId <= 209) return '控制状态';
            if (eventId >= 210 && eventId <= 219) return '处理状态';
            if (eventId >= 220 && eventId <= 229) return '操作员动作';
            if (eventId >= 230 && eventId <= 239) return '报警';
            if (eventId >= 240 && eventId <= 249) return '通信';
            if (eventId >= 11000 && eventId <= 11099) return '材料处理';
            if (eventId >= 11100 && eventId <= 11199) return '工艺';
            return '其他';
        },
        
        getEventTypeColor(eventId) {
            const category = this.getEventCategory(eventId);
            return this.getEventCategoryColor(category);
        },
        
        getEventCategoryColor(category) {
            const colors = {
                '控制状态': 'primary',
                '处理状态': 'success',
                '操作员动作': 'info',
                '报警': 'danger',
                '通信': 'warning',
                '材料处理': 'primary',
                '工艺': 'success',
                '其他': 'info'
            };
            return colors[category] || 'info';
        },
        
        // ========== 数据管理方法 ==========
        
        importReports() {
            ConfigUtils.showMessage('info', '功能开发中', '报告导入功能正在开发中');
        },
        
        exportReports() {
            const data = {
                reports: this.defaultReports.map(r => ({
                    reportId: r.reportId,
                    variableIds: r.variableIds,
                    description: r.description
                })),
                eventLinks: this.defaultEventLinks.map(e => ({
                    eventId: e.eventId,
                    reportIds: e.reportIds,
                    description: e.description
                }))
            };
            
            ConfigUtils.exportToJson(data, `reports_events_${new Date().toISOString().slice(0, 10)}.json`);
        },
        
        loadEventTemplates() {
            const templates = [
                { eventId: 300, reportIds: [1], description: "设备初始化完成" },
                { eventId: 301, reportIds: [1], description: "设备准备就绪" },
                { eventId: 302, reportIds: [1], description: "工艺开始" },
                { eventId: 303, reportIds: [1], description: "工艺完成" }
            ];
            
            templates.forEach(template => {
                if (!this.defaultEventLinks.find(e => e.eventId === template.eventId)) {
                    this.defaultEventLinks.push({ ...template, editing: false });
                }
            });
            
            ConfigUtils.showMessage('success', '模板加载成功', '已加载标准事件模板');
        },
        
        validateEventLinks() {
            let validCount = 0;
            let errorMessages = [];
            
            this.defaultEventLinks.forEach((event, index) => {
                if (!event.eventId) {
                    errorMessages.push(`第${index + 1}行: 事件ID不能为空`);
                } else if (event.reportIds.length === 0) {
                    errorMessages.push(`第${index + 1}行: 必须关联至少一个报告`);
                } else {
                    validCount++;
                }
            });
            
            if (errorMessages.length > 0) {
                ConfigUtils.showNotification('warning', '验证完成', 
                    `有效事件: ${validCount}, 错误事件: ${errorMessages.length}`);
            } else {
                ConfigUtils.showNotification('success', '验证通过', 
                    `所有 ${validCount} 个事件配置正确`);
            }
        },
        
        runIntegrityCheck() {
            this.integrityIssues = [];
            
            // 检查报告ID唯一性
            const reportIds = this.defaultReports.map(r => r.reportId);
            const duplicateReports = reportIds.filter((id, index) => reportIds.indexOf(id) !== index);
            if (duplicateReports.length > 0) {
                this.integrityIssues.push({
                    id: 'duplicate_reports',
                    type: 'error',
                    title: '重复的报告ID',
                    description: `发现重复的报告ID: ${duplicateReports.join(', ')}`
                });
            }
            
            // 检查事件链接的报告ID是否存在
            const validReportIds = new Set(reportIds);
            this.defaultEventLinks.forEach(event => {
                const invalidReportIds = event.reportIds.filter(id => !validReportIds.has(id));
                if (invalidReportIds.length > 0) {
                    this.integrityIssues.push({
                        id: `invalid_reports_${event.eventId}`,
                        type: 'warning',
                        title: `事件${event.eventId}关联无效报告`,
                        description: `无效的报告ID: ${invalidReportIds.join(', ')}`
                    });
                }
            });
            
            // 检查未关联事件的报告
            const linkedReportIds = new Set();
            this.defaultEventLinks.forEach(event => {
                event.reportIds.forEach(id => linkedReportIds.add(id));
            });
            
            const unlinkedReports = this.defaultReports.filter(r => !linkedReportIds.has(r.reportId));
            if (unlinkedReports.length > 0) {
                this.integrityIssues.push({
                    id: 'unlinked_reports',
                    type: 'info',
                    title: '未关联的报告',
                    description: `报告ID ${unlinkedReports.map(r => r.reportId).join(', ')} 未被任何事件关联`
                });
            }
        }
    }
};
</script>

<style scoped>
.section-toolbar {
    margin-bottom: 20px;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 4px;
}

.overview-card {
    height: 350px;
}

.overview-card h4 {
    margin: 15px 0 10px 0;
    color: #303133;
    font-size: 14px;
}

.reports-tabs {
    margin-top: 10px;
}
</style>