@{
    ViewData["Title"] = "SH设备配置管理系统";
    Layout = null; // 不使用布局文件
}
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- Element Plus CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/element-plus@2.4.4/dist/index.css" />

    <!-- 自定义样式 -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .hero-section {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            padding: 20px;
        }

        .hero-container {
            max-width: 1200px;
            width: 100%;
            text-align: center;
            z-index: 2;
        }

        .hero-title {
            font-size: clamp(2.5rem, 5vw, 4rem);
            font-weight: 700;
            color: white;
            margin-bottom: 20px;
            text-shadow: 0 4px 8px rgba(0,0,0,0.3);
            line-height: 1.2;
        }

        .hero-subtitle {
            font-size: clamp(1.1rem, 2.5vw, 1.5rem);
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 40px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
            line-height: 1.6;
        }

        .feature-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 60px;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px 30px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
            position: relative;
            overflow: hidden;
        }

            .feature-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, #667eea, #764ba2);
                transform: scaleX(0);
                transition: transform 0.3s ease;
            }

            .feature-card:hover::before {
                transform: scaleX(1);
            }

            .feature-card:hover {
                transform: translateY(-10px);
                box-shadow: 0 30px 80px rgba(0, 0, 0, 0.15);
            }

        .feature-icon {
            font-size: 3.5rem;
            margin-bottom: 25px;
            display: block;
        }

        .feature-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 15px;
        }

        .feature-description {
            color: #718096;
            line-height: 1.6;
            margin-bottom: 25px;
            font-size: 1rem;
        }

        .feature-stats {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            display: block;
        }

        .stat-label {
            font-size: 0.85rem;
            color: #a0aec0;
            margin-top: 5px;
        }

        .action-buttons {
            margin-top: 50px;
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .cta-button {
            padding: 15px 35px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 50px;
            text-decoration: none;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            min-width: 180px;
            justify-content: center;
        }

        .cta-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

            .cta-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 12px 35px rgba(102, 126, 234, 0.6);
                color: white;
                text-decoration: none;
            }

        .cta-secondary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            backdrop-filter: blur(10px);
        }

            .cta-secondary:hover {
                background: rgba(255, 255, 255, 0.3);
                transform: translateY(-2px);
                color: white;
                text-decoration: none;
            }

        .floating-elements {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: 1;
        }

        .floating-element {
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }

            .floating-element:nth-child(1) {
                width: 80px;
                height: 80px;
                top: 20%;
                left: 10%;
                animation-delay: 0s;
            }

            .floating-element:nth-child(2) {
                width: 120px;
                height: 120px;
                top: 60%;
                right: 10%;
                animation-delay: 2s;
            }

            .floating-element:nth-child(3) {
                width: 60px;
                height: 60px;
                bottom: 20%;
                left: 20%;
                animation-delay: 4s;
            }

        keyframes float {
            0%, 100%

        {
            transform: translateY(0px) rotate(0deg);
        }

        50% {
            transform: translateY(-20px) rotate(180deg);
        }

        }

        .status-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            padding: 15px 20px;
            z-index: 1000;
            transform: translateY(100%);
            transition: transform 0.3s ease;
        }

            .status-bar.show {
                transform: translateY(0);
            }

        .status-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            color: white;
            font-size: 0.9rem;
        }

        .system-info {
            display: flex;
            gap: 30px;
            align-items: center;
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
            animation: pulse 2s infinite;
        }

            .status-indicator.warning {
                background: #f59e0b;
            }

            .status-indicator.error {
                background: #ef4444;
            }

        keyframes pulse {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }

        }

        media (max-width: 768px) {
            .hero-section

        {
            padding: 40px 20px;
        }

        .feature-cards {
            grid-template-columns: 1fr;
            gap: 20px;
            margin-top: 40px;
        }

        .feature-card {
            padding: 30px 20px;
        }

        .action-buttons {
            flex-direction: column;
            align-items: center;
            margin-top: 40px;
        }

        .cta-button {
            width: 100%;
            max-width: 280px;
        }

        .system-info {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .status-content {
            flex-direction: column;
            gap: 15px;
        }

        }
    </style>
</head>
<body>
    <div id="home-app" v-cloak>
        <!-- 浮动装饰元素 -->
        <div class="floating-elements">
            <div class="floating-element"></div>
            <div class="floating-element"></div>
            <div class="floating-element"></div>
        </div>

        <!-- 主要内容区域 -->
        <section class="hero-section">
            <div class="hero-container">
                <!-- 主标题区域 -->
                <h1 class="hero-title">
                    🏭 SH设备配置管理系统
                </h1>
                <p class="hero-subtitle">
                    专业的工业设备配置管理平台，为半导体制造提供稳定可靠的PLC通信与SECS/GEM协议配置解决方案
                </p>

                <!-- 功能特性卡片 -->
                <div class="feature-cards">
                    <!-- PLC配置管理卡片 -->
                    <a href="/Config/PLCConfig" class="feature-card">
                        <span class="feature-icon" style="color: #4299e1;">🔌</span>
                        <h3 class="feature-title">PLC通信配置</h3>
                        <p class="feature-description">
                            全面的PLC设备通信参数配置，包括连接设置、超时管理、数据块配置和实时状态监控
                        </p>
                        <div class="feature-stats">
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.plc.connections }}</span>
                                <span class="stat-label">连接数</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.plc.dataBlocks }}</span>
                                <span class="stat-label">数据块</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.plc.uptime }}%</span>
                                <span class="stat-label">在线率</span>
                            </div>
                        </div>
                    </a>

                    <!-- 设备系统配置卡片 -->
                    <a href="/Config/EquipmentConfig" class="feature-card">
                        <span class="feature-icon" style="color: #48bb78;">⚙️</span>
                        <h3 class="feature-title">设备系统配置</h3>
                        <p class="feature-description">
                            SECS/GEM协议参数配置，设备信息管理，SVID状态变量映射和分步骤配置向导
                        </p>
                        <div class="feature-stats">
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.equipment.devices }}</span>
                                <span class="stat-label">设备数</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.equipment.mappings }}</span>
                                <span class="stat-label">映射数</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.equipment.efficiency }}%</span>
                                <span class="stat-label">效率</span>
                            </div>
                        </div>
                    </a>

                    <!-- 系统监控卡片 -->
                    <a href="/Config" class="feature-card">
                        <span class="feature-icon" style="color: #ed8936;">📊</span>
                        <h3 class="feature-title">系统状态监控</h3>
                        <p class="feature-description">
                            实时系统状态监控，性能指标统计，通信质量分析和智能告警通知系统
                        </p>
                        <div class="feature-stats">
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.monitoring.alerts }}</span>
                                <span class="stat-label">告警</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.monitoring.quality }}%</span>
                                <span class="stat-label">通信质量</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{{ systemStats.monitoring.performance }}%</span>
                                <span class="stat-label">系统性能</span>
                            </div>
                        </div>
                    </a>
                </div>

                <!-- 操作按钮 -->
                <div class="action-buttons">
                    <a href="/Config" class="cta-button cta-primary">
                        <span>🚀</span>
                        开始配置
                    </a>
                    <button v-on:click="showSystemInfo" class="cta-button cta-secondary">
                        <span>📋</span>
                        系统信息
                    </button>
                    <button v-on:click="toggleStatusBar" class="cta-button cta-secondary">
                        <span>📈</span>
                        {{ statusBarVisible ? '隐藏' : '显示' }}状态栏
                    </button>
                </div>
            </div>
        </section>

        <!-- 底部状态栏 -->
        <div class="status-bar" :class="{ show: statusBarVisible }">
            <div class="status-content">
                <div class="system-info">
                    <div class="info-item">
                        <div class="status-indicator" :class="getStatusClass('plc')"></div>
                        <span>PLC: {{ systemStatus.plc ? '已连接' : '未连接' }}</span>
                    </div>
                    <div class="info-item">
                        <div class="status-indicator" :class="getStatusClass('equipment')"></div>
                        <span>设备: {{ systemStatus.equipment ? '运行中' : '待机' }}</span>
                    </div>
                    <div class="info-item">
                        <div class="status-indicator" :class="getStatusClass('system')"></div>
                        <span>系统负载: {{ systemStatus.cpuUsage }}%</span>
                    </div>
                </div>
                <div style="font-size: 0.8rem; opacity: 0.8;">
                    最后更新: {{ lastUpdateTime }}
                </div>
            </div>
        </div>

        <!-- 系统信息对话框 -->
        <el-dialog v-model="showSystemDialog"
                   title="系统信息"
                   width="600px"
                   :center="true">
            <div style="space-y: 20px;">
                <el-descriptions :column="2" border>
                    <el-descriptions-item label="系统版本">{{ systemInfo.version }}</el-descriptions-item>
                    <el-descriptions-item label="运行时间">{{ systemInfo.uptime }}</el-descriptions-item>
                    <el-descriptions-item label="ASP.NET Core">{{ systemInfo.aspNetVersion }}</el-descriptions-item>
                    <el-descriptions-item label="操作系统">{{ systemInfo.os }}</el-descriptions-item>
                    <el-descriptions-item label="服务器时间">{{ systemInfo.serverTime }}</el-descriptions-item>
                    <el-descriptions-item label="时区">{{ systemInfo.timeZone }}</el-descriptions-item>
                </el-descriptions>

                <div style="margin-top: 30px;">
                    <h4 style="margin-bottom: 15px; color: #303133;">系统模块状态</h4>
                    <el-row :gutter="20">
                        <el-col :span="8" v-for="module in systemModules" :key="module.name">
                            <el-card shadow="hover" style="text-align: center;">
                                <div style="font-size: 2rem; margin-bottom: 10px;">{{ module.icon }}</div>
                                <div style="font-weight: 600; margin-bottom: 5px;">{{ module.name }}</div>
                                <el-tag :type="module.status === 'running' ? 'success' : 'danger'" size="small">
                                    {{ module.status === 'running' ? '运行中' : '已停止' }}
                                </el-tag>
                            </el-card>
                        </el-col>
                    </el-row>
                </div>
            </div>
            <template #footer>
                <span class="dialog-footer">
                    <el-button v-on:click="refreshSystemInfo" type="primary">刷新信息</el-button>
                    <el-button v-on:click="showSystemDialog = false">关闭</el-button>
                </span>
            </template>
        </el-dialog>
    </div>

    <!-- 加载Vue.js和Element Plus -->
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/element-plus@2.4.4/dist/index.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/element-plus@2.4.4/dist/locale/zh-cn.min.js"></script>

    <script>
        // 检查依赖加载
        if (typeof Vue === 'undefined') {
            alert('Vue.js加载失败，请检查网络连接');
        } else if (typeof ElementPlus === 'undefined') {
            alert('ElementPlus加载失败，请检查网络连接');
        } else {
            // 初始化应用
            const { createApp } = Vue;
            const { ElMessage, ElNotification } = ElementPlus;

            const app = createApp({
                data() {
                    return {
                        statusBarVisible: false,
                        showSystemDialog: false,
                        systemStats: {
                            plc: {
                                connections: 12,
                                dataBlocks: 45,
                                uptime: 98.5
                            },
                            equipment: {
                                devices: 8,
                                mappings: 156,
                                efficiency: 94.2
                            },
                            monitoring: {
                                alerts: 3,
                                quality: 95.8,
                                performance: 87.3
                            }
                        },
                        systemStatus: {
                            plc: true,
                            equipment: true,
                            cpuUsage: 35
                        },
                        systemInfo: {
                            version: '1.0.0',
                            uptime: '7天 12小时 45分钟',
                            aspNetVersion: '.NET 8.0',
                            os: 'Windows Server 2022',
                            serverTime: '',
                            timeZone: 'GMT+8 (中国标准时间)'
                        },
                        systemModules: [
                            { name: 'PLC通信', icon: '🔌', status: 'running' },
                            { name: 'SECS/GEM', icon: '⚙️', status: 'running' },
                            { name: '数据采集', icon: '📊', status: 'running' },
                            { name: '告警服务', icon: '🚨', status: 'running' },
                            { name: '日志记录', icon: '📝', status: 'running' },
                            { name: '配置管理', icon: '🔧', status: 'running' }
                        ],
                        lastUpdateTime: ''
                    }
                },
                methods: {
                    toggleStatusBar() {
                        this.statusBarVisible = !this.statusBarVisible;

                        if (this.statusBarVisible) {
                            ElMessage.success('状态栏已显示');
                        } else {
                            ElMessage.info('状态栏已隐藏');
                        }
                    },

                    showSystemInfo() {
                        this.refreshSystemInfo();
                        this.showSystemDialog = true;
                    },

                    refreshSystemInfo() {
                        // 更新服务器时间
                        this.systemInfo.serverTime = new Date().toLocaleString();

                        // 模拟随机更新一些统计数据
                        this.systemStats.plc.uptime = (98 + Math.random() * 2).toFixed(1);
                        this.systemStats.equipment.efficiency = (93 + Math.random() * 5).toFixed(1);
                        this.systemStats.monitoring.quality = (94 + Math.random() * 4).toFixed(1);
                        this.systemStats.monitoring.performance = (85 + Math.random() * 10).toFixed(1);

                        // 更新系统状态
                        this.systemStatus.cpuUsage = Math.floor(30 + Math.random() * 20);

                        ElMessage.success('系统信息已刷新');
                    },

                    getStatusClass(type) {
                        switch (type) {
                            case 'plc':
                                return this.systemStatus.plc ? '' : 'error';
                            case 'equipment':
                                return this.systemStatus.equipment ? '' : 'warning';
                            case 'system':
                                if (this.systemStatus.cpuUsage > 80) return 'error';
                                if (this.systemStatus.cpuUsage > 60) return 'warning';
                                return '';
                            default:
                                return '';
                        }
                    },

                    updateTime() {
                        this.lastUpdateTime = new Date().toLocaleTimeString();
                    },

                    simulateSystemActivity() {
                        // 随机模拟系统状态变化
                        if (Math.random() < 0.1) {
                            this.systemStatus.plc = Math.random() > 0.2;
                        }

                        if (Math.random() < 0.05) {
                            this.systemStatus.equipment = Math.random() > 0.1;
                        }

                        // 模拟CPU使用率变化
                        this.systemStatus.cpuUsage += (Math.random() - 0.5) * 10;
                        this.systemStatus.cpuUsage = Math.max(10, Math.min(90, this.systemStatus.cpuUsage));
                        this.systemStatus.cpuUsage = Math.floor(this.systemStatus.cpuUsage);

                        // 模拟告警数量变化
                        if (Math.random() < 0.03) {
                            this.systemStats.monitoring.alerts = Math.max(0, this.systemStats.monitoring.alerts + (Math.random() > 0.5 ? 1 : -1));
                        }
                    }
                },

                mounted() {
                    console.log('SH设备配置管理系统主页已加载');

                    // 初始化时间
                    this.updateTime();
                    this.systemInfo.serverTime = new Date().toLocaleString();

                    // 每秒更新时间
                    setInterval(() => {
                        this.updateTime();
                    }, 1000);

                    // 每5秒模拟系统活动
                    setInterval(() => {
                        this.simulateSystemActivity();
                    }, 5000);

                    // 5秒后自动显示状态栏
                    setTimeout(() => {
                        if (!this.statusBarVisible) {
                            this.statusBarVisible = true;
                            ElNotification({
                                title: '欢迎使用',
                                message: 'SH设备配置管理系统已启动，状态栏已显示',
                                type: 'success',
                                duration: 3000
                            });
                        }
                    }, 5000);
                }
            });

            // 使用Element Plus和中文语言包
            app.use(ElementPlus, {
                locale: ElementPlusLocaleZhCn
            });

            // 挂载应用
            app.mount('#home-app');
        }
    </script>
</body>
</html>